Linked list:
    you need constant-time insertions/deletions from the list (such as in real-time computing where time predictability is absolutely critical)
    you don't know how many items will be in the list. With arrays, you may need to re-declare and copy memory if the array grows too big
    you don't need random access to any elements
    you want to be able to insert items in the middle of the list (such as a priority queue)

Array/Vector
   you need indexed/random access to elements
   you know the number of elements in the array ahead of time so that you can allocate the correct amount of memory for the array
   you need speed when iterating through all the elements in sequence. You can use pointer math on the array to access each element, whereas you need to lookup the node based on the pointer for each element in linked list, which may result in page faults which may result in performance hits.
   memory is a concern. Filled arrays take up less memory than linked lists. 

circular buffer
    std::queue and std::deque
